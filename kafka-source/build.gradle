/*
 * Copyright (c) 2013-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
description = 'Riak Ingestion library built on Reactor'
group = 'com.basho.ingest'

ext {
    gradleVersion = '2.6'
    gradleScriptDir = "${rootProject.projectDir}/gradle"

    // Groovy
    groovyVersion = '2.4.4'

    // Logging
    slf4jVersion = '1.7.12'
    logbackVersion = '1.1.3'

    // Riak
    riakClientVersion = '2.0.2'

    // Libraries
    reactorVersion = '2.0.5.RELEASE'
    nettyVersion = '4.1.0.Beta5'

    // Testing
    spockVersion = '0.7-groovy-2.0'

    javadocLinks = [
            "http://docs.oracle.com/javase/8/docs/api/",
            "http://www.reactive-streams.org/reactive-streams-tck-1.0.0-javadoc/"
    ] as String[]
}

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/milestone" }
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+',
                'org.springframework.boot:spring-boot-gradle-plugin:1.3.0.M5',
                'io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'optional-base'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'spring-boot'

configurations.all {
    exclude group: 'commons-logging'
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'http://repo.spring.io/milestone' }
}

[compileJava, compileTestJava]*.options*.compilerArgs = [
        "-Xlint:serial",
        "-Xlint:varargs",
        "-Xlint:cast",
        "-Xlint:classfile",
        "-Xlint:dep-ann",
        "-Xlint:divzero",
        "-Xlint:empty",
        "-Xlint:finally",
        "-Xlint:overrides",
        "-Xlint:path",
        "-Xlint:processing",
        "-Xlint:static",
        "-Xlint:try",
        "-Xlint:-options", // intentionally disabled
        "-Xlint:-fallthrough", // intentionally disabled
        "-Xlint:-rawtypes", // TODO enable and fix warnings
        "-Xlint:-deprecation", // TODO enable and fix warnings
        "-Xlint:-unchecked" // TODO enable and fix warnings
]

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-stream-parent:1.0.0.M1'
    }
}

dependencies {
    // Logging
    compile "org.slf4j:slf4j-api:$slf4jVersion"

    // Spring Cloud
    compile "org.springframework.cloud:spring-cloud-starter-stream-kafka",
            "org.springframework.integration:spring-integration-java-dsl:1.1.0.M2"

    // Reactor
    compile "io.projectreactor:reactor-net:$reactorVersion",
            "io.projectreactor:reactor-groovy:$reactorVersion"

    // Netty
    compile "io.netty:netty-all:4.1.0.Beta6"

    // Riak
    compile "com.basho.riak:riak-client:$riakClientVersion"

    // Jackson
    optional "com.fasterxml.jackson.core:jackson-databind"

    // Groovy
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // Testing
    testCompile "org.spockframework:spock-core:$spockVersion",
            "org.hamcrest:hamcrest-library:1.3",
            "org.springframework.boot:spring-boot-starter-test"
    testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion",
            "ch.qos.logback:logback-classic:$logbackVersion"
}

task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
    group = 'Project Setup'
    gradleVersion = "$gradleVersion"
}
